#!/usr/bin/env bash

#/ NAME
#/     boxcar-pkgsrc - builds and installs pkgsrc for boxcar

function remote_build {
  set -exfu

  if [[ "$(uname -s)" = "Linux" ]]; then
    sudo -E aptitude update
    sudo -E aptitude install -y build-essential
  fi

  export VAULT="$(pwd)/vault"
  export PKG_HOME="$(pwd)/pkg"

  PATH="$PKG_HOME/bin:$PKG_HOME/sbin:$PATH"

  mkdir -p pkgsrc pkg || sudo install -o $(id -un) -g $(id -gn) -d -m 0755 pkgsrc pkg
  rm -rf pkgsrc pkg || true
  git clone -b pkgsrc_2013Q4 git@github.com:destructuring/pkgsrc pkgsrc

  cd pkgsrc
  make -f Makefile.goose SH=/bin/bash bmake
  make -f Makefile.goose SH=/bin/bash "$PKG_HOME/bin/bmake"
  make -f Makefile.goose SH=/bin/bash packages
}

function remote_install {
  set -exfu

  export VAULT="$(pwd)/vault"
  export PKG_HOME="$(pwd)/pkg"

  PATH="$PKG_HOME/bin:$PKG_HOME/sbin:$PATH"

  mkdir -p pkgsrc pkg || sudo install -o $(id -un) -g $(id -gn) -d -m 0755 pkgsrc pkg
  rm -rf pkgsrc pkg || true
  git clone -b pkgsrc_2013Q4 git@github.com:destructuring/pkgsrc pkgsrc

  pushd pkgsrc
  make -f Makefile.goose SH=/bin/bash "$PKG_HOME/bin/bmake"
  make -f Makefile.goose SH=/bin/bash cache
  popd

  rm -rf vault || true
  
}

if [[ "$#" = 0 ]]; then
  case "${BUILD_IMAGE_PHASE:-}" in
    build)
      remote_build
      exit $?
      ;;
    install)
      remote_install
      exit $?
      ;;
    *)
      echo "ERROR: unknown build phase: $BUILD_IMAGE_PHASE" 1>&2
      exit 1
  esac
fi

# figure out the project root under which bin, lib live
shome="$(unset CDPATH; cd -P -- "$(dirname -- "$BASH_SOURCE")/.." && pwd -P)"

# load a jason bourne library
source _jason
require _boxcar
require _boxcar_opt

bootstrap="$BASH_SOURCE"

# entry point
function main {
  local pth_ssh_config="$1"

  if ! ssh -F $pth_ssh_config default mkdir -p ${OVERRIDE_anchor}/vault 2>&-; then
    local un="$(ssh -F $pth_ssh_config default id -un)"
    local gn="$(ssh -F $pth_ssh_config default id -gn)"
    ssh -F $pth_ssh_config default sudo install -d -o $un -g $gn -m 755 ${OVERRIDE_anchor}/vault
  fi

  ssh -F $pth_ssh_config default rm -rf ${OVERRIDE_anchor}/vault || true

  local pkg_id
  local nm_os="$(ssh -F $pth_ssh_config default uname -s)"
  case "$nm_os" in
    Darwin)
      pkg_id="${nm_os}_$(ssh -F $pth_ssh_config default uname -r | cut -d. -f1)"
      ;;
    *)
      pkg_id="${nm_os}"
      ;;
  esac

  case "${BUILD_IMAGE_PHASE:-}" in
    build)
      rsync -ia -e "ssh -F $pth_ssh_config" $VAULT/distfiles default:${OVERRIDE_anchor}/vault/
      ;;
    install)
      ssh -F $pth_ssh_config default mkdir -p ${OVERRIDE_anchor}/vault/packages
      rsync -ia -e "ssh -F $pth_ssh_config" $VAULT/packages/${pkg_id}$(echo $OVERRIDE_anchor | tr / _)_pkg default:${OVERRIDE_anchor}/vault/packages/
      ;;
  esac

  standard_hook "$bootstrap" "$@"

  case "${BUILD_IMAGE_PHASE:-}" in
    build)
        rsync -ia -e "ssh -F $pth_ssh_config" default:${OVERRIDE_anchor}/vault/distfiles $VAULT/
        rsync -ia -e "ssh -F $pth_ssh_config" default:${OVERRIDE_anchor}/vault/packages $VAULT/
      ;;
  esac
}

require sub "$BASH_SOURCE" "$@"
