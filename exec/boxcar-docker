#!/usr/bin/env bash

#/ NAME
#/     boxcar-docker - debootstrap provisioning script

function remote_build {
  set -exfu; cd

  docker_install
  container_build "$BUILD_IMAGE_PHASE"
}

function remote_install {
  set -exfu; cd

  docker_install
}

function container_build {
  local prefix="image"

  local nm_distro="$1"; shift

  # minimal install with debootstrap
  source /etc/lsb-release
  sudo env DEBIAN_FRONTEND=noninteractive aptitude -y install -t "${DISTRIB_CODENAME}-backports" debootstrap
  rm -rf image; mkdir image
  sudo -E debootstrap --arch amd64 --include=aptitude,openssh-server \
            ${nm_distro} image http://archive.ubuntu.com/ubuntu/

  # workarounds
  printf "%s\n%s\n" "#!/bin/bash" "exit 101" | sudo tee image/usr/sbin/policy-rc.d
  sudo chmod 0755 image/usr/sbin/policy-rc.d

  # http cache/proxy
  if [[ -f "/etc/apt/apt.conf.d/01proxy" ]]; then
    sudo rsync -ia /etc/apt/apt.conf.d/01proxy image/etc/apt/apt.conf.d/01proxy
  fi

  # update install with server distribution
  sudo -E chroot image apt-get install -y minimal^ server^ standard^

  # complete list of apt repos
  local tmp_sources="$(mktemp -t XXXXXX)"
  cat > $tmp_sources << __EOF
deb http://security.ubuntu.com/ubuntu ${nm_distro}-security main restricted universe multiverse
deb http://us.archive.ubuntu.com/ubuntu/ ${nm_distro} main restricted universe multiverse
deb http://us.archive.ubuntu.com/ubuntu/ ${nm_distro}-backports main restricted universe multiverse
deb http://us.archive.ubuntu.com/ubuntu/ ${nm_distro}-updates main restricted universe multiverse
__EOF
  sudo cp "$tmp_sources" $prefix/etc/apt/sources.list
  sudo chmod 0644 $prefix/etc/apt/sources.list
  rm -f "$tmp_sources"
  sudo chroot image aptitude update

  # create ubuntu user
  sudo chroot image useradd -u 1000 -U -m ubuntu -s /bin/bash

  # allow vagrant ssh using insecure key
  sudo install -d -m 0700 $prefix/home/ubuntu/.ssh
  echo "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key" | sudo tee $prefix/home/ubuntu/.ssh/authorized_keys
  sudo chmod 600 $prefix/home/ubuntu/.ssh/authorized_keys
  sudo chown -R ubuntu:ubuntu $prefix/home/ubuntu

  # sudoer permissions
  local tmp_sudo="$(mktemp -t XXXXXX)"
  cat > $tmp_sudo <<__EOF
ubuntu ALL=(ALL) NOPASSWD: ALL
__EOF
  sudo cp "$tmp_sudo" $prefix/etc/sudoers.d/90-cloud-init-users
  sudo chmod 0400 $prefix/etc/sudoers.d/90-cloud-init-users
  rm -f "$tmp_sudo"

  # cleanup
  sudo rm -rf /etc/udev/rules.d/70-persistent-net.rules /lib/udev/rules.d/75-persistent-net-generator.rules /dev/.udev /var/lib/dhcp3
  sudo mkdir -p /etc/udev/rules.d/70-persistent-net.rules
  sudo chroot image aptitude clean

  sudo rm -f image/etc/apt/apt.conf.d/01proxy

  # sshd requirements
  sudo install -d -m 0755 -o root -g root /var/run/sshd

  # pretend upstart services always succeed
  sudo dpkg-divert --local --rename --add /sbin/initctl
  sudo ln -s /bin/true /sbin/initctl

  # docker image
  sudo tar cfp docker-${nm_distro}.tar -C image .
}

function docker_install {
  sudo apt-key add - <<__EOF
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.11 (GNU/Linux)

mQENBFIOqEUBCADsvqwefcPPQArws9jHF1PaqhXxkaXzeE5uHHtefdoRxQdjoGok
HFmHWtCd9zR7hDpHE7Q4dwJtSFWZAM3zaUtlvRAgvMmfLm08NW9QQn0CP5khjjF1
cgckhjmzQAzpEHO5jiSwl0ZU8ouJrLDgmbhT6knB1XW5/VmeECqKRyhlEK0zRz1a
XV+4EVDySlORmFyqlmdIUmiU1/6pKEXyRBBVCHNsbnpZOOzgNhfMz8VE8Hxq7Oh8
1qFaFXjNGCrNZ6xr/DI+iXlsZ8urlZjke5llm4874N8VPUeFQ/szmsbSqmCnbd15
LLtrpvpSMeyRG+LoTYvyTG9QtAuewL9EKJPfABEBAAG0OURvY2tlciBSZWxlYXNl
IFRvb2wgKHJlbGVhc2Vkb2NrZXIpIDxkb2NrZXJAZG90Y2xvdWQuY29tPokBOAQT
AQIAIgUCUg6oRQIbLwYLCQgHAwIGFQgCCQoLBBYCAwECHgECF4AACgkQ2Fdqi6iN
IenM+QgAnOiozhHDAYGO92SmZjib6PK/1djbrDRMreCT8bnzVpriTOlEtARDXsmX
njKSFa+HTxHi/aTNo29TmtHDfUupcfmaI2mXbZt1ixXLuwcMv9sJXKoeWwKZnN3i
9vAM9/yAJz3aq+sTXeG2dDrhZr34B3nPhecNkKQ4v6pnQy43Mr59Fvv5CzKFa9oZ
IoZf+Ul0F90HSw5WJ1NsDdHGrAaHLZfzqAVrqHzazw7ghe94k460T8ZAaovCaTQV
HzTcMfJdPz/uTim6J0OergT9njhtdg2ugUj7cPFUTpsxQ1i2S8qDEQPL7kabAZZo
Pim0BXdjsHVftivqZqfWeVFKMorchQ==
=fRgo
-----END PGP PUBLIC KEY BLOCK-----
__EOF
  echo "deb http://get.docker.io/ubuntu docker main" | sudo tee /etc/apt/sources.list.d/docker.list
  sudo aptitude update

  sudo env DEBIAN_FRONTEND=noninteractive apt-get -y install --install-recommends lxc/precise-backports
  sudo env DEBIAN_FRONTEND=noninteractive apt-get -y install --install-recommends lxc-docker
  sudo usermod -a -G docker ubuntu
}

if [[ "$#" = 0 ]]; then
  case "${BUILD_IMAGE_PHASE:-}" in
    install)
      remote_install
      exit $?
      ;;
    *)
      remote_build
      exit $?
      ;;
  esac
fi


# figure out the project root under which bin, lib live
shome="$(unset CDPATH; cd -P -- "$(dirname -- "$BASH_SOURCE")/.." && pwd -P)"

# load a jason bourne library
source _jason
require _boxcar
require _boxcar_opt

bootstrap="$BASH_SOURCE"

# entry point
function main {
  local pth_ssh_config="$1"

  case "${BUILD_IMAGE_PHASE:-}" in
    install)
      standard_hook "$bootstrap" "$@"
      cat $FLAGS_cachedir/docker-${OVERRIDE_release}.tar | ssh -F $pth_ssh_config default docker import - "${OVERRIDE_release}"
      ssh -F $pth_ssh_config default docker run "${OVERRIDE_release}" true
      ;;
    *)
      standard_hook "$bootstrap" "$@"
      rsync -ia -e "ssh -F '$pth_ssh_config'" default:docker-${BUILD_IMAGE_PHASE}.tar $FLAGS_cachedir/
      ;;
  esac
}

require sub "$BASH_SOURCE" "$@"
