#!/usr/bin/env bash

#/ NAME
#/     boxcar-docker - debootstrap provisioning script

function remote_build {
  set -exfu

  source /etc/lsb-release

  container_install "$DISTRIB_CODENAME"
  container_build "$DISTRIB_CODENAME" "image" "sudo chroot image"
}

function remote_install {
  set -exfu

  source /etc/lsb-release

  container_install "$DISTRIB_CODENAME"
}

function container_build {
  local nm_distro="$1"; shift
  local prefix="$1"; shift
  local sudo="$1"; shift

  local tmp_cloud="$(mktemp -t XXXXXX)"

  # minimal install
  sudo -E env DEBIAN_FRONTEND=noninteractive aptitude -y install cloud-init

  sudo -E env DEBIAN_FRONTEND=noninteractive aptitude -y install debootstrap
  rm -rf image; mkdir image
  sudo -E debootstrap --arch amd64 --include=language-pack-en,aptitude,openssh-server,cloud-init \
            ${nm_distro} image http://archive.ubuntu.com/ubuntu/

  # workarounds
  printf "%s\n%s\n" "#!/usr/bin/env bash" "exit 101" | sudo tee $prefix/usr/sbin/policy-rc.d
  sudo chmod 0755 $prefix/usr/sbin/policy-rc.d

  # pretend upstart services always succeed
  ${sudo} dpkg-divert --local --rename --add /sbin/initctl
  sudo ln -nfs /bin/true $prefix/sbin/initctl

  # update install with server distribution
  sudo -E chroot image apt-get install -y minimal^ server^ standard^

  # create ubuntu user
  ${sudo} useradd -u 1000 -U -m ubuntu -s /bin/bash -G adm,audio,cdrom,dip,lpadmin,plugdev,sambashare,sudo

  cat > $tmp_cloud << __EOF
manual
__EOF
  sudo install -o root -g root -m 0644 $tmp_cloud $prefix/etc/init/cloud-init.override

  # complete list of apt repos
  local d='$'
  cat > $tmp_cloud << __EOF
\## Note, this file is written by cloud-init on first boot of an instance
\## modifications made here will not survive a re-bundle.
\## if you wish to make changes you can:
\## a.) add 'apt_preserve_sources_list: true' to /etc/cloud/cloud.cfg
\##     or do the same in user-data
\## b.) add sources in /etc/apt/sources.list.d
\## c.) make changes to template file /etc/cloud/templates/sources.list.tmpl
\###

\## main
deb ${d}mirror ${d}codename main
deb-src ${d}mirror ${d}codename main

\## updates
deb ${d}mirror ${d}codename-updates main
deb-src ${d}mirror ${d}codename-updates main

\## universe
deb ${d}mirror ${d}codename universe
deb-src ${d}mirror ${d}codename universe
deb ${d}mirror ${d}codename-updates universe
deb-src ${d}mirror ${d}codename-updates universe

\## multiverse
deb ${d}mirror ${d}codename multiverse
deb-src ${d}mirror ${d}codename multiverse
deb ${d}mirror ${d}codename-updates multiverse
deb-src ${d}mirror ${d}codename-updates multiverse

\## backports
deb ${d}mirror ${d}codename-backports main restricted universe multiverse
deb-src ${d}mirror ${d}codename-backports main restricted universe multiverse

\## partner
deb http://archive.canonical.com/ubuntu ${d}codename partner
deb-src http://archive.canonical.com/ubuntu ${d}codename partner

\## security
deb http://security.ubuntu.com/ubuntu ${d}codename-security main
deb-src http://security.ubuntu.com/ubuntu ${d}codename-security main
deb http://security.ubuntu.com/ubuntu ${d}codename-security universe
deb-src http://security.ubuntu.com/ubuntu ${d}codename-security universe
deb http://security.ubuntu.com/ubuntu ${d}codename-security multiverse
deb-src http://security.ubuntu.com/ubuntu ${d}codename-security multiverse
__EOF
  sudo install -o root -g root -m 0400 "$tmp_cloud" $prefix/etc/cloud/templates/sources.list.tmpl

  # sudo permissions
  cat > $tmp_cloud <<__EOF
# ubuntu user is default user in cloud-images.
# It needs passwordless sudo functionality.
ubuntu ALL=(ALL) NOPASSWD:ALL
__EOF
  sudo install -o root -g root -m 0400 "$tmp_cloud" $prefix/etc/sudoers.d/90-cloud-init-users

  # cloud init
  sudo mkdir -p $prefix/var/lib/cloud/seed/nocloud

  cat > $tmp_cloud << __EOF
instance-id: $nm_distro-$(date +%s)
local-hostname: $nm_distro
public-keys:
  vagrant: [$(curl https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub), '']
__EOF
  sudo install -o root -g root -m 0600 $tmp_cloud $prefix/var/lib/cloud/seed/nocloud/meta-data

  cat > $tmp_cloud  << __EOF
#cloud-config
disable_root: false
manage_etc_hosts: true
system_info:
   distro: ubuntu
   default_user:
     name: ubuntu
     lock_passwd: True
     gecos: Ubuntu
     groups: [adm, audio, cdrom, dip, lpadmin, plugdev, sambashare, sudo]
     sudo: ["ALL=(ALL) NOPASSWD:ALL"]
     shell: /bin/bash
__EOF
  sudo install -o root -g root -m 0600 $tmp_cloud $prefix/var/lib/cloud/seed/nocloud/user-data

  # run and verify cloud init
  if ${sudo} cloud-init init --local; then
    ${sudo} cloud-init modules --mode config
    ${sudo} cloud-init modules --mode final
  else
    ${sudo} cloud-init start-local || true
    ${sudo} cloud-init-cfg all config || true
    ${sudo} cloud-init-cfg all final || true
  fi

  # cleanup
  rm -f $tmp_cloud
  sudo rm -f $prefix/var/lib/cloud/seed/nocloud/meta-data
  sudo rm -rf $prefix/etc/udev/rules.d/70-persistent-net.rules $prefix/lib/udev/rules.d/75-persistent-net-generator.rules $prefix/dev/.udev /var/lib/dhcp3
  sudo mkdir -p $prefix/etc/udev/rules.d/70-persistent-net.rules
  ${sudo} aptitude clean

  # debug
  ${sudo} id -a ubuntu
  ${sudo} -u ubuntu sudo id -a ubuntu
  ${sudo} cat /root/.ssh/authorized_keys /home/ubuntu/.ssh/authorized_keys

  # enable upstart in image
  sudo rsync -ia $prefix/sbin/init $prefix/sbin/init.orig
  sudo rm -f $prefix/sbin/initctl
  sudo mv $prefix/sbin/initctl.distrib $prefix/sbin/initctl
  sudo rm -f $prefix/usr/sbin/policy-rc.d

  # docker image
  sudo tar cfp docker-${nm_distro}.tar -C image .
}

function container_install {
  local nm_distro="$1"; shift

  sudo apt-key add - <<__EOF
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.11 (GNU/Linux)

mQENBFIOqEUBCADsvqwefcPPQArws9jHF1PaqhXxkaXzeE5uHHtefdoRxQdjoGok
HFmHWtCd9zR7hDpHE7Q4dwJtSFWZAM3zaUtlvRAgvMmfLm08NW9QQn0CP5khjjF1
cgckhjmzQAzpEHO5jiSwl0ZU8ouJrLDgmbhT6knB1XW5/VmeECqKRyhlEK0zRz1a
XV+4EVDySlORmFyqlmdIUmiU1/6pKEXyRBBVCHNsbnpZOOzgNhfMz8VE8Hxq7Oh8
1qFaFXjNGCrNZ6xr/DI+iXlsZ8urlZjke5llm4874N8VPUeFQ/szmsbSqmCnbd15
LLtrpvpSMeyRG+LoTYvyTG9QtAuewL9EKJPfABEBAAG0OURvY2tlciBSZWxlYXNl
IFRvb2wgKHJlbGVhc2Vkb2NrZXIpIDxkb2NrZXJAZG90Y2xvdWQuY29tPokBOAQT
AQIAIgUCUg6oRQIbLwYLCQgHAwIGFQgCCQoLBBYCAwECHgECF4AACgkQ2Fdqi6iN
IenM+QgAnOiozhHDAYGO92SmZjib6PK/1djbrDRMreCT8bnzVpriTOlEtARDXsmX
njKSFa+HTxHi/aTNo29TmtHDfUupcfmaI2mXbZt1ixXLuwcMv9sJXKoeWwKZnN3i
9vAM9/yAJz3aq+sTXeG2dDrhZr34B3nPhecNkKQ4v6pnQy43Mr59Fvv5CzKFa9oZ
IoZf+Ul0F90HSw5WJ1NsDdHGrAaHLZfzqAVrqHzazw7ghe94k460T8ZAaovCaTQV
HzTcMfJdPz/uTim6J0OergT9njhtdg2ugUj7cPFUTpsxQ1i2S8qDEQPL7kabAZZo
Pim0BXdjsHVftivqZqfWeVFKMorchQ==
=fRgo
-----END PGP PUBLIC KEY BLOCK-----
__EOF
  echo "deb http://get.docker.io/ubuntu docker main" | sudo tee /etc/apt/sources.list.d/docker.list

  echo "deb http://us.archive.ubuntu.com/ubuntu/ ${nm_distro}-backports main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ubuntu_${nm_distro}_backports.list

  sudo -E aptitude update

  sudo env DEBIAN_FRONTEND=noninteractive apt-get -y install --install-recommends lxc/precise-backports
  sudo env DEBIAN_FRONTEND=noninteractive apt-get -y install --install-recommends lxc-docker
  sudo usermod -a -G docker ubuntu

  echo 'DOCKER_OPTS="-s=devicemapper"' | sudo tee /etc/default/docker
  sudo restart docker
}

if [[ "$#" = 0 ]]; then
  case "${BUILD_IMAGE_PHASE:-}" in
    install)
      remote_install
      exit $?
      ;;
    build)
      remote_build
      exit $?
      ;;
  esac
fi

# figure out the project root under which bin, lib live
shome="$(unset CDPATH; cd -P -- "$(dirname -- "$BASH_SOURCE")/.." && pwd -P)"

# load a jason bourne library
source _jason
require _boxcar
require _boxcar_opt

bootstrap="$BASH_SOURCE"

# entry point
function main {
  local pth_ssh_config="$1"

  source /etc/lsb-release

  ssh -F $pth_ssh_config default rm -rf ${OVERRIDE_anchor}/vault || true
  ssh -F $pth_ssh_config default mkdir -p ${OVERRIDE_anchor}/vault/images

  case "${BUILD_IMAGE_PHASE:-}" in
    install)
      standard_hook "$bootstrap" "$@"
      cat ${VAULT}/images/docker-${OVERRIDE_release}.tar | ssh -F $pth_ssh_config default docker import - "${OVERRIDE_release}"
      ;;
    build)
      standard_hook "$bootstrap" "$@"
      rsync -ia -e "ssh -F '$pth_ssh_config'" default:${OVERRIDE_anchor}/docker-${DISTRIB_CODENAME}.tar ${VAULT}/images/
      ;;
  esac
}

require sub "$BASH_SOURCE" "$@"
